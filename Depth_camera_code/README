This is a repository to hold the code for my experiments around the Intel Realsense D435i depth camera and counting people walking through a threshold.
This code and environment had to be created from within a Linux environment due to the improved support and quality for the Intel Realsense SDK, compared to the Windows version.

This code provides a solution to counting and tracking people in an enclosed space without the use of any artificial intelligence. Instead, it makes use of a depth camera and various algorithms.

### TODO ###

Look at how i can improve the detection quality and reduce drop outs
    - An interesting thing to note is that part of the code involves cutting out the background of the image, i.e. the floor and surrounding objects like low tables etc.
    This means there is a depth area that the camera can see. However, due to the nature of the wide angled camera, this depth is curved radially away from the camera, with a radius equal to that of the set distance. Therefore when someone walks through a frame, there are times where more and less of them is observed by the camera, as this cutoff point on them moves. This has a slight noticable effect on the detection algorithm, as the person could be ignored at times.
    The detection of this method is a balance between detecting a person accurately, and falsely detecting another object as a person. If we try to extend this threshhold distance to improve detection of the person, we begin detecting tables and chairs too.

    - Something I want to try is moving the camera further down towards the subject, thereby allowing for less interferance for the camera and hopefully more accuracy. The camera is currently being held at approximately 2.6 meters from the ground. I will try to lower it and experiment with that.

    - Managed to find out how to apply certain visual presets that are available for the camera. 'High Density' provides a very accurate representation of a person, with good filling and object detection. However it provides a small black outline around the subject's head as it is closer to the camera, so the preset shows the disparity more. This causes issues as my code detects the head and body as two seperate contours, and can begin double counting.
    To fix this, I found out how to enable a Hole Filling filter, that simply fills in holes over the whole image depending on how close a pixel is to another depth pixel. This massively improved the detection quality and reduced dropouts greatly, as well as making the whole system smoother.
        - an issue i can forsee here is that if multiple people walked below the camera close to eachother, the hole filling could merge them into one blob and only count 1 person instead of 2 or 3. This could be countered by setting the visual preset to 'High Accuracy' which provides better distinction between objects, or by reducing the strength of the hole filling.